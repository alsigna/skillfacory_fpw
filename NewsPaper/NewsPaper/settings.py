"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
from NewsPaper.private_settings import EMAIL_PASS, EMAIL_USER, EMAIL_FROM

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-0eo^=@b$z+ykl%41#_60jdjlxg%d2+03v1i-b^==9m^=6r+0b="

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "news.apps.NewsConfig",
    # "accounts",
    "sign",
    "crispy_forms",
    "crispy_bootstrap5",
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "django_apscheduler",
]

DEFAULT_FROM_EMAIL = EMAIL_FROM

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # per-site cache
    # "django.middleware.cache.UpdateCacheMiddleware",
    # "django.middleware.common.CommonMiddleware",
    # "django.middleware.cache.FetchFromCacheMiddleware",
]

ROOT_URLCONF = "NewsPaper.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.request",
            ],
        },
    },
]


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
]

WSGI_APPLICATION = "NewsPaper.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    # {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_URL = "/accounts/login/"
# LOGIN_URL = "/sign/login/"
LOGIN_REDIRECT_URL = "/news/"

SITE_ID = 1

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = "username"
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_FORMS = {"signup": "sign.forms.BasicSignupForm"}


EMAIL_HOST = "smtp.yandex.ru"
EMAIL_PORT = 465
EMAIL_HOST_USER = EMAIL_USER
EMAIL_HOST_PASSWORD = EMAIL_PASS
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = EMAIL_FROM
SERVER_EMAIL = EMAIL_FROM
EMAIL_SUBJECT_PREFIX = "[NewsPaper] "
EMAIL_FILE_PATH = BASE_DIR.joinpath("tmp")

APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds


CELERY_BROKER_URL = "redis://localhost:6379"
CELERY_RESULT_BACKEND = "redis://localhost:6379"
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"


CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": BASE_DIR.joinpath("cache_files"),
        "TIMEOUT": 60,
    }
}

ADMINS = [
    ("Alexander Ignatov", "ignatov.alx@gmail.com"),
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "debug_info_only": {
            "()": "NewsPaper.log_middleware.FilterLevels",
            "filter_levels": ["DEBUG", "INFO"],
        },
        "warning_only": {
            "()": "NewsPaper.log_middleware.FilterLevels",
            "filter_levels": ["WARNING"],
        },
        "error_critical_only": {
            "()": "NewsPaper.log_middleware.FilterLevels",
            "filter_levels": ["ERROR", "CRITICAL"],
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
    },
    "formatters": {
        "simple": {
            "format": "%(name)s %(levelname)s %(module)s %(asctime)s: %(message)s",
        },
        "extended": {
            "format": "%(name)s %(levelname)s %(module)s %(asctime)s %(pathname)s: %(message)s",
        },
        "with_trace": {
            "format": "%(name)s %(levelname)s %(module)s %(asctime)s %(pathname)s: %(exc_info)s %(message)s",
        },
    },
    "handlers": {
        "console_debug_info": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
            "filters": [
                "debug_info_only",
                "require_debug_true",
            ],
        },
        "console_warning": {
            "class": "logging.StreamHandler",
            "formatter": "extended",
            "filters": [
                "warning_only",
                "require_debug_true",
            ],
        },
        "console_error_critical": {
            "class": "logging.StreamHandler",
            "formatter": "with_trace",
            "filters": [
                "error_critical_only",
                "require_debug_true",
            ],
        },
        "file_general": {
            "class": "logging.FileHandler",
            "filename": "general.log",
            "formatter": "simple",
            "level": "INFO",
            "filters": ["require_debug_false"],
        },
        "file_errors": {
            "class": "logging.FileHandler",
            "filename": "errors.log",
            "formatter": "with_trace",
            "level": "ERROR",
        },
        "file_security": {
            "class": "logging.FileHandler",
            "filename": "security.log",
            "formatter": "extended",
            "level": "INFO",
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "formatter": "simple",
            "include_html": True,
            "email_backend": "django.core.mail.backends.smtp.EmailBackend",
            # "email_backend": "django.core.mail.backends.filebased.EmailBackend",
        },
    },
    "loggers": {
        "django": {
            "handlers": [
                "console_debug_info",
                "console_warning",
                "console_error_critical",
                "file_general",
            ],
            "level": "DEBUG",
        },
        "django.request": {
            "handlers": [
                "file_errors",
                "mail_admins",
            ],
            "propagate": True,
            "level": "ERROR",
        },
        "django.server": {
            "handlers": [
                "file_errors",
                "mail_admins",
            ],
            "propagate": True,
            "level": "ERROR",
        },
        "django.template": {
            "handlers": ["file_errors"],
            "propagate": True,
            "level": "ERROR",
        },
        "django.db_backends": {
            "handlers": ["file_errors"],
            "propagate": True,
            "level": "ERROR",
        },
        "django.security": {
            "handlers": ["file_security"],
            "propagate": False,
            "level": "INFO",
        },
    },
}
